// silent rule so it does not show up in output
// WHITESPACE is a special builtin rule that is implicitly put in around each instance of ~
// you can stop this from happening by using atomic rules
WHITESPACE = _{ (" " | "\t")+ }

not_newline = {
  !(NEWLINE) ~ ANY
}

boundary = _{ WHITE_SPACE | PUNCTUATION | EOI }

header_aliases = { "[aliases]" }

keyword_keys = _{ "keys" ~ &boundary }

keyword_layer = { keyword_access_modifier | keyword_keys }

keyword_access_modifier = _{ ("private" | "public") ~ &boundary }

// another builtin rule
// we say that comments do not start with #( in order to disambiguate them from tap macros, which use the #( syntax
COMMENT = _{ "#" ~ not_newline* ~ NEWLINE}

legal_character = _{
  ASCII_ALPHANUMERIC | "_" | "-"
}

// REGULAR ATOMIC
// we do not want whitespace between the characters
identifier = @{
  legal_character+ ~ &boundary
}

table = _{
  (header_aliases | table_header) ~
  table_body
}

// table_header is atomic so it does not implicitly allow whitespace
// it is regular atomic as opposed to "compound atomic" because we do not want all the inner rules to evaluate
table_header = @{
  "[" ~ (table_header | table_name) ~ "]"
}

layer_name = _{
  identifier ~ ("." ~ !keyword_layer ~ identifier)*
}

table_name = ${
  // only the very last path component can be a layer keyword
  // this is saying that either the ONLY component is the layer keyword or the last component after several (non-layer-keyword) identifiers is optionally a layer keyword
  keyword_layer |
    (layer_name ~
    ("." ~ keyword_layer)?)
}

table_body = _{
  // including the NEWLINE in the beginning of the rule to avoid handling the EOI case at the end
  (NEWLINE+ ~ (table_property ~ NEWLINE+)* ~ (assignment | table))*
}

table_property = {
  parent_assignment
}

layer_name_list = !{
  // lists do NOT accept trailing commas
  "{" ~ layer_name ~ ("," ~ layer_name)* ~ "}"
}

parent_assignment = {
  "parent" ~ "=" ~ (layer_name | layer_name_list)
}

// we need this rule to be atomic so that it does not look at the tap macro # mark and immediately consume till the end of the line as if it were a comment
assignment = ${
  (identifier | identifier_list) ~
  WHITESPACE? ~
  "=" ~
  WHITESPACE? ~
  (button | string | reference | number | boolean | identifier)
}

identifier_list = !{
  // lists do NOT accept trailing commas
  "{" ~ identifier ~ ("," ~ identifier)* ~ "}"
}

button = {
  tap_macro | button_alias | normal_button
}

// this rule matches parentheses
// this means that normal_button's can span over multiple lines
normal_button = {
  "(" ~
    (
     // a bunch of non-parentheses and non-& characters
     // we do this so that we don't consume things related to the other rules
     //
     // normal_button's start with an opening parenthesis ( '(' ), so we need to avoid that
     // they end with a closing parenthesis, so we need to avoid consuming that so that the rule can exit
     //
     // variable references start with ampersands (&), so we need to avoid consuming that
     //
     // tap macros start with #, so we need to avoid consuming that

     (!("(" | ")" | "&") ~ ANY)+ ~
     (variable_reference)? ~
     // followed by an optional button
     (button)?
    // repeated many times
    )* ~
  // enclosed within parentheses
  ")"
}

variable_reference = ${
  "&" ~ identifier
}

button_alias = ${
  "@" ~ identifier
}

// make tap_macro non-atomic so that it has implicit whitespace even if its calling rules are atomic
// the different elements are allowed to be on different lines and have whitespace
tap_macro = !{
  "#(" ~ ((button_alias | normal_button) ~ NEWLINE?)+ ~ ")"
}

string = _{
  single_quoted_string | double_quoted_string
}

double_quoted_string = {
  "\"" ~ (!("\"") ~ ANY)* ~ "\""
}

single_quoted_string = {
  "'" ~ (!("'") ~ ANY)* ~ "'"
}

// we need to have a separate reference_layer_name because layer_name is
// a silent rule
// it's a bit of an annoyance in the parsing code since it would
// make a lot more sense just to match on `layer_name`, but this is currently
// the only way to express the desired behavior in Pest
reference_layer_name = ${
  layer_name
}

reference = ${
  reference_layer_name ~ (":" ~ identifier)
}

number = @{
  ("-" | "+")? ~ ASCII_DIGIT+ ~ &boundary
}

boolean = ${
  keyword_true | keyword_false
}

keyword_true = @{
  "true" ~ &boundary
}

keyword_false = @{
  "false" ~ &boundary
}

// there are no nested tables inside of "configuration"
configuration = {
  "[configuration]" ~ NEWLINE+ ~ (assignment ~ NEWLINE+)+
}

// the underscore makes the "main" rule silent
// this means that it will not appear in our output
main = _{
  SOI ~ NEWLINE* ~ configuration ~ table* ~ NEWLINE* ~ EOI
}
