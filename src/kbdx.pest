// silent rule so it does not show up in output
// WHITESPACE is a special builtin rule that is implicitly put in around each instance of ~
// you can stop this from happening by using atomic rules
WHITESPACE = _{ (" " | "\t")+ }

not_newline = {
  !(NEWLINE) ~ ANY
}

boundary = _{ WHITE_SPACE | PUNCTUATION | EOI }

// another builtin rule
// we say that comments do not start with #( in order to disambiguate them from tap macros, which use the #( syntax
COMMENT = _{ "#" ~ not_newline* ~ NEWLINE}

// REGULAR ATOMIC
// we do not want whitespace between the characters
identifier = @{
  (ASCII_ALPHANUMERIC | "_" | "-")+ ~ &boundary
}

table = _{
  table_header ~
  table_body
}

// table_header is atomic so it does not implicitly allow whitespace
// it is regular atomic as opposed to "compound atomic" because we do not want all the inner rules to evaluate
table_header = ${
  "[" ~ (table_header | table_name) ~ "]"
}

table_name = ${
  identifier ~ ("." ~ identifier)*
}

table_body = _{
  // including the NEWLINE in the beginning of the rule to avoid handling the EOI case at the end
  (NEWLINE+ ~ (assignment | table))*
}

// we need this rule to be atomic so that it does not look at the tap macro # mark and immediately consume till the end of the line as if it were a comment
assignment = ${
  (identifier | list) ~
  WHITESPACE? ~
  "=" ~
  WHITESPACE? ~
  (button | string | reference | number | identifier)
}

list = !{
  // lists do NOT accept trailing commas
  "{" ~ identifier ~ ("," ~ identifier)* ~ "}"
}

button = {
  tap_macro | button_alias | normal_button
}

// this rule matches parentheses
// this means that normal_button's can span over multiple lines
normal_button = {
  "(" ~
    (
     // a bunch of non-parentheses and non-& characters
     // we do this so that we don't consume things related to the other rules
     //
     // normal_button's start with an opening parenthesis ( '(' ), so we need to avoid that
     // they end with a closing parenthesis, so we need to avoid consuming that so that the rule can exit
     //
     // variable references start with ampersands (&), so we need to avoid consuming that
     //
     // tap macros start with #, so we need to avoid consuming that

     (!("(" | ")" | "&") ~ ANY)+ ~
     (variable_reference)? ~
     // followed by an optional button
     (button)?
    // repeated many times
    )* ~
  // enclosed within parentheses
  ")"
}

variable_reference = ${
  "&" ~ identifier
}

button_alias = ${
  "@" ~ identifier
}

// make tap_macro non-atomic so that it has implicit whitespace even if its calling rules are atomic
// the different elements are allowed to be on different lines and have whitespace
tap_macro = !{
  "#(" ~ ((button_alias | normal_button) ~ NEWLINE?)+ ~ ")"
}

string = _{
  single_quoted_string | double_quoted_string
}

double_quoted_string = {
  "\"" ~ (!("\"") ~ ANY)* ~ "\""
}

single_quoted_string = {
  "'" ~ (!("'") ~ ANY)* ~ "'"
}

reference = ${
  (identifier ~ ("." ~ identifier)*) ~ (":" ~ identifier)
}

number = @{
  ("-" | "+")? ~ ASCII_DIGIT+ ~ &boundary
}

// the underscore makes the "main" rule silent
// this means that it will not appear in our output
main = _{
  SOI ~ NEWLINE* ~ table* ~ NEWLINE* ~ EOI
}
